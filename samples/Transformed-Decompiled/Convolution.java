import com.nativelibs4java.opencl.CLBuffer;
import com.nativelibs4java.opencl.CLContext;
import com.nativelibs4java.opencl.CLDevice.QueueProperties;
import com.nativelibs4java.opencl.CLEvent;
import com.nativelibs4java.opencl.CLKernel;
import com.nativelibs4java.opencl.CLMem.Usage;
import com.nativelibs4java.opencl.CLProgram;
import com.nativelibs4java.opencl.CLQueue;
import com.nativelibs4java.opencl.JavaCL;
import org.bridj.Pointer;

public class Convolution
{
  private static final String kernel_1817842420 = " static int checkbound(int v0_INT, int v1_INT, int v2_INT, int v3_INT) {       int v4_INT;                                                   {                                                                  }/*87*/                                                  {                                                                   int t14 = 3;                                                 v4_INT = t14;                                                 }/*88*/                                                  {                                                                   int t15 = v0_INT;                                             int t16 = v4_INT;                                            if(t15>t16) { {                                                          int t17 = v0_INT;                                             int t18 = v2_INT;                                             int t19 = v4_INT;                                             int t20 = v4_INT;                                             int t21 = t18*t19;                                            int t22 = t21-t20;                                           if(t17<t22) { {                                                          int t23 = v1_INT;                                             int t24 = 1;                                                 if(t23>t24) { {                                                          int t25 = v1_INT;                                             int t26 = v3_INT;                                             int t27 = 1;                                                  int t28 = t26-t27;                                           if(t25<t28) { {                                                         }/*94*/                                                  {                                                                   int t29 = 1;                                                    return t29;                                                    }/*95*/                                                  }/* end if */                                            {                                                                   int t30 = 0;                                                 return t30;                                                   }/*90*/                                                  }/*93*/                                                  }/* end if */                                            }/*92*/                                                  }/* end if */                                            }/*91*/                                                  }/* end if */                                            }/*89*/                                                  } static void processPixel(int v0_INT, int v1_INT, int v2_INT, int v3_INT, __global char* v4_2887, __global char* v5_2887, __global float* v6_2891) {       int v10_INT;                                                  int v15_INT;                                                  int v14_INT;                                                  float v17_FLOAT;                                              int v9_INT;                                                   int v8_INT;                                                   int v13_INT;                                                  float v7_FLOAT;                                               int v12_INT;                                                  int v16_INT;                                                  int v11_INT;                                                  {                                                                  }/*97*/                                                  {                                                                   float t41 = 0.0f;                                            v7_FLOAT = t41;                                               }/*98*/                                                  {                                                                   int t42 = 0;                                                 v8_INT = t42;                                                 }/*99*/                                                  {                                                                   char t43 = -3;                                               v9_INT = t43;                                                 }/*100*/                                                 {                                                                   char t44 = 6;                                                v10_INT = t44;                                                }/*101*/                                                 {                                                                   int t45 = -1;                                                v11_INT = t45;                                                }/*102*/                                                 {                                                                   int t46 = 2;                                                 v12_INT = t46;                                                }/*103*/                                                 {                                                                   int t47 = v9_INT;                                            v13_INT = t47;                                                }/*104*/                                                 {                                                                  }/*105*/                                                 {                                                                   int t48 = v13_INT;                                            int t49 = v10_INT;                                           if(t48>=t49) { {                                                        }/*117*/                                                 {                                                                   short t50 = 255;                                             v13_INT = t50;                                                }/*118*/                                                 {                                                                   float t51 = v7_FLOAT;                                         int t52 = v13_INT;                                            int t53 = (int) t51;                                          int t54 = min(t53, t52);                                      int t55 = 0;                                                  int t56 = max(t55, t54);                                      char t57 = (char) t56;                                       v14_INT = t57;                                                }/*119*/                                                 {                                                                  __global char* t58 = v5_2887;                                  int t59 = v1_INT;                                             int t60 = v2_INT;                                             int t61 = v0_INT;                                             int t62 = v14_INT;                                            int t63 = t59*t60;                                            int t64 = t63+t61;                                           t58[t64] = t62;                                               }/*120*/                                                 {                                                                  return;                                                       }/*121*/                                                 }/* end if */                                            {                                                                   int t65 = v11_INT;                                           v14_INT = t65;                                                }/*107*/                                                 {                                                                  }/*108*/                                                 {                                                                   int t66 = v14_INT;                                            int t67 = v12_INT;                                           if(t66>=t67) { {                                                        }/*115*/                                                 {                                                                  v13_INT += 3;                                                 }/*116*/                                                 }/* end if */                                            {                                                                  __global char* t68 = v4_2887;                                  int t69 = v1_INT;                                             int t70 = v14_INT;                                            int t71 = v2_INT;                                             int t72 = v0_INT;                                             int t73 = v13_INT;                                            int t74 = t69+t70;                                            int t75 = t74*t71;                                            int t76 = t72+t73;                                            int t77 = t75+t76;                                            char t78 = t68[t77];                                         v15_INT = t78;                                                }/*110*/                                                 {                                                                   int t79 = v15_INT;                                            short t80 = 255;                                              int t81 = t80&t79;                                           v16_INT = t81;                                                }/*111*/                                                 {                                                                  __global float* t82 = v6_2891;                                 int t83 = v8_INT;                                            v8_INT += 1;                                                   float t84 = t82[t83];                                        v17_FLOAT = t84;                                              }/*112*/                                                 {                                                                   float t85 = v7_FLOAT;                                         int t86 = v16_INT;                                            float t87 = v17_FLOAT;                                        float t88 = (float) t86;                                      float t89 = t88*t87;                                          float t90 = t85+t89;                                         v7_FLOAT = t90;                                               }/*113*/                                                 {                                                                  v14_INT += 1;                                                 }/*114*/                                                 }/*109*/                                                 }/*106*/                                                 } __kernel void kernel_1817842420(const int limit0, int v0_INT, __global float* v4_2891, int v5_INT, int v1_INT, __global char* v2_2887, int v7_INT, int v9_INT, __global char* v3_2887, int v8_INT) {       int dim0 = get_global_id(0);                                  v9_INT += 1 * dim0;                                           if(v9_INT >= limit0) return;                                  int v10_INT;                                                  int v12_INT;                                                  int v11_INT;                                                  {                                                                   int t0 = v9_INT;                                              int t1 = v0_INT;                                              int t2 = v5_INT;                                              int t3 = t1*t2;                                               int t4 = t0%t3;                                              v10_INT = t4;                                                 }/*77*/                                                  {                                                                   int t5 = v9_INT;                                              int t6 = v0_INT;                                              int t7 = v5_INT;                                              int t8 = t6*t7;                                               int t9 = t5/t8;                                              v11_INT = t9;                                                 }/*78*/                                                  {                                                                   int t10 = v10_INT;                                            int t11 = v11_INT;                                            int t12 = v0_INT;                                             int t13 = v1_INT;                                             int t31 = checkbound(t10, t11, t12, t13);                    v12_INT = t31;                                                }/*79*/                                                  {                                                                   int t32 = v12_INT;                                            int t33 = v8_INT;                                            if(t32==t33) { {                                                        }/*82*/                                                  {                                                                   int t34 = v10_INT;                                            int t35 = v11_INT;                                            int t36 = v7_INT;                                             int t37 = v1_INT;                                            __global char* t38 = v2_2887;                                 __global char* t39 = v3_2887;                                 __global float* t40 = v4_2891;                                processPixel(t34, t35, t36, t37, t38, t39, t40);                      }/*83*/                                                  }/* end if */                                            {                                                                  v9_INT += 1;                                                  }/*81*/                                                  {                                                                  }/*123*/                                                 }/*80*/                                                  }";
  private static CLContext context = JavaCL.createBestContext();
  
  public static void applyConvolution(int paramInt1, int paramInt2, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, float[] paramArrayOfFloat)
  {
    int i = 3;
    int j = i * paramInt1 * paramInt2;
    int k = paramInt1 * i;
    int m = 1;
    
    int n = 0;kernel_1817842420(j, paramInt1, paramArrayOfFloat, i, paramInt2, paramArrayOfByte1, k, n, paramArrayOfByte2, m);
  }
  
  public static int checkbound(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i = 3;
    if ((paramInt1 > i) && (paramInt1 < paramInt3 * i - i) && (paramInt2 > 1) && (paramInt2 < paramInt4 - 1)) {
      return 1;
    }
    return 0;
  }
  
  public static void processPixel(int paramInt1, int paramInt2, int paramInt3, int paramInt4, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, float[] paramArrayOfFloat)
  {
    float f1 = 0.0F;
    int i = 0;
    int j = -3;int k = 6;int m = -1;int n = 2;
    for (int i1 = j; i1 < k; i1 += 3) {
      for (i2 = m; i2 < n; i2++)
      {
        int i3 = paramArrayOfByte1[((paramInt2 + i2) * paramInt3 + (paramInt1 + i1))];
        int i4 = 0xFF & i3;
        float f2 = paramArrayOfFloat[(i++)];
        f1 += i4 * f2;
      }
    }
    i1 = 255;
    int i2 = (byte)Math.max(0, Math.min((int)f1, i1));
    paramArrayOfByte2[(paramInt2 * paramInt3 + paramInt1)] = i2;
  }
  
  public static void kernel_1817842420(int paramInt1, int paramInt2, float[] paramArrayOfFloat, int paramInt3, int paramInt4, byte[] paramArrayOfByte1, int paramInt5, int paramInt6, byte[] paramArrayOfByte2, int paramInt7)
  {
    CLDevice.QueueProperties[] arrayOfQueueProperties = { CLDevice.QueueProperties.ProfilingEnable };
    CLQueue localCLQueue = context.createDefaultQueue(arrayOfQueueProperties);
    String[] arrayOfString = { kernel_1817842420 };
    CLKernel[] arrayOfCLKernel = context.createProgram(arrayOfString).createKernels();
    CLKernel localCLKernel = arrayOfCLKernel[0];
    int i = paramInt2;
    CLBuffer localCLBuffer1 = context.createBuffer(CLMem.Usage.Input, Pointer.pointerToFloats(paramArrayOfFloat), true);
    int j = paramInt3;
    int k = paramInt4;
    CLBuffer localCLBuffer2 = context.createBuffer(CLMem.Usage.Input, Pointer.pointerToBytes(paramArrayOfByte1), true);
    int m = paramInt5;
    int n = paramInt6;
    CLBuffer localCLBuffer3 = context.createBuffer(CLMem.Usage.InputOutput, Pointer.pointerToBytes(paramArrayOfByte2), true);
    int i1 = paramInt7;
    localCLKernel.setArgs(new Object[] { paramInt1, i, localCLBuffer1, j, k, localCLBuffer2, m, n, localCLBuffer3, i1 });
    int i2 = paramInt1 - paramInt6 / 1;
    CLEvent[] arrayOfCLEvent = { null };
    CLEvent localCLEvent = localCLKernel.enqueueNDRange(localCLQueue, new int[] { i2 }, arrayOfCLEvent);
    localCLQueue.finish();
    localCLBuffer3.read(localCLQueue, new CLEvent[] { localCLEvent }).getBytes(paramArrayOfByte2);
  }
}
